{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","atendimento","posicao","mesa","tipo","anteriores","animation","_this2","interval","setInterval","setState","Math","floor","random","round","concat","toConsumableArray","stop","clearInterval","_this$state","console","log","react_default","a","createElement","className","Segment","inverted","Label","size","color","ribbon","lib","animationIn","animationOut","isVisible","placeholder","style","fontSize","textAlign","Header","Subheader","padded","dist_default","format","Statistic","Group","slice","map","Value","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qWA4GeA,sBAvFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,YAAa,CAAEC,QAAS,KAAMC,KAAM,EAAGC,KAAM,GAAKC,WAAY,GAAIC,WAAW,GAF3Eb,mFAMC,IAAAc,EAAAX,KAElBA,KAAKY,SAAWC,YAAY,WAC1BF,EAAKG,SAAS,SAACV,GAAD,MAAY,CACxBC,YAAa,CACXC,QAASS,KAAKC,MAAuB,IAAhBD,KAAKE,SAAmB,GAC7CV,KAAMQ,KAAKC,MAAuB,EAAhBD,KAAKE,SAAgB,GACvCT,KAAMO,KAAKG,MAAMH,KAAKE,WAExBR,WAAU,CAAGL,EAAMC,aAATc,OAAArB,OAAAsB,EAAA,EAAAtB,CAAyBM,EAAMK,aACzCC,WAAYN,EAAMM,cAEnB,oDAIHV,KAAKqB,sCAILC,cAActB,KAAKY,2CAGZ,IAAAW,EAEwCvB,KAAKI,MAA5CC,EAFDkB,EAEClB,YAAaI,EAFdc,EAEcd,WAAYC,EAF1Ba,EAE0Bb,UAIjC,OAFAc,QAAQC,IAAIhB,GAIViB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,UAAQ,GACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAK,UAAUC,MAAM,QAAQC,QAAM,GAA1C,0BAMAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACQ,EAAA,SAAD,CAAUC,YAAY,QAAQC,aAAa,YAAYC,UAAW7B,GAChEgB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASU,aAAW,EAACT,UAAQ,EAACU,MAAO,CAAEC,SAAU,QAAUC,UAAU,UACnEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQV,MAA4B,IAArB7B,EAAYG,KAAa,QAAU,QAA8B,IAArBH,EAAYG,KAAa,KAAO,KAAMH,EAAYC,QAC3GoB,EAAAC,EAAAC,cAACgB,EAAA,EAAOC,UAAR,CAAkBJ,MAAO,CAAEC,SAAU,SAAUR,MAAO,QAAtD,SAAsE7B,EAAYE,KAAlF,WAQZmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,UAAQ,EAACe,QAAM,EAACL,MAAO,CAAEC,SAAU,QAAUC,UAAU,UAC9DjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAQf,SAAU,IAAMoC,OAAO,aAC/BtB,EAAAC,EAAAC,cAACgB,EAAA,EAAOC,UAAR,CAAkBJ,MAAO,CAAEC,SAAU,OAAQR,MAAO,UAAWR,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAQqB,OAAO,oBAOtFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,UAAQ,GACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAK,UAAUC,MAAM,MAAMC,QAAM,GAAxC,oBAGAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACqB,EAAA,EAAUC,MAAX,CAAiBP,UAAU,OAAOZ,UAAQ,GAC7BtB,EAxFf0C,MAAM,EAAG,GACRC,IAAI,SAAA/C,GAAW,OACxBqB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAWf,MAA4B,IAArB7B,EAAYG,KAAa,QAAU,OAAQuB,UAAQ,GACnEL,EAAAC,EAAAC,cAACqB,EAAA,EAAUI,MAAX,KAAuC,IAArBhD,EAAYG,KAAa,KAAO,KAAMH,EAAYC,SACpEoB,EAAAC,EAAAC,cAACqB,EAAA,EAAUjB,MAAX,aAAuB3B,EAAYE,qBAMvB+C,IAAMC,YCRlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnE,QACf6D,UAAUC,cAAcQ,YAI1BlD,QAAQC,IACN,iHAKEuC,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB7C,QAAQC,IAAI,sCAGRuC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLtD,QAAQsD,MAAM,4CAA6CA,YCvFjEC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDa1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAMzB,EAAK,GAAA5C,OAAMkE,eAAN,sBAEP7B,GAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHK,KAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BV,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLrD,QAAQC,IACN,mEArFA0E,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjC5C,QAAQC,IACN,gHAMJqC,EAAgBC,EAAOC,MCpC/BE","file":"static/js/main.7fa4bcb6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Animated } from \"react-animated-css\";\n\nimport { Statistic, Segment, Header, Label } from 'semantic-ui-react';\n\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nconst atendidos = (arr) => {\n  arr = arr.slice(0, 6);\n  return arr.map(atendimento => (\n    <Statistic color={atendimento.tipo === 0 ? \"green\" : \"blue\"} inverted>\n      <Statistic.Value>{atendimento.tipo === 0 ? \"NR\" : \"PR\"}{atendimento.posicao}</Statistic.Value>\n      <Statistic.Label>MESA:{atendimento.mesa}</Statistic.Label>\n    </Statistic>\n  ));\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { atendimento: { posicao: \"10\", mesa: 2, tipo: 0 }, anteriores: [], animation: true };\n  }\n\n\n  componentDidMount() {\n\n    this.interval = setInterval(() => {\n      this.setState((state) => ({\n        atendimento: {\n          posicao: Math.floor((Math.random() * 1000) + 1),\n          mesa: Math.floor((Math.random() * 4) + 1),\n          tipo: Math.round(Math.random())\n        },\n        anteriores: [state.atendimento, ...state.anteriores],\n        animation: !state.animation\n      }))\n    }, 5000)\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n\n    const { atendimento, anteriores, animation } = this.state;\n\n    console.log(anteriores);\n\n    return (\n\n      <div className=\"painel\">\n        <div className=\"painel-item painel-shadow\">\n          <Segment inverted >\n            <Label size=\"massive\" color='green' ribbon>\n              Pr√≥ximo Atendimento\n        </Label>\n\n\n\n            <div className=\"center\">\n              <Animated animationIn=\"shake\" animationOut=\"headShake\" isVisible={animation}>\n                <Segment placeholder inverted style={{ fontSize: '5rem' }} textAlign=\"center\">\n                  <Header color={atendimento.tipo === 0 ? \"green\" : \"blue\"}>{atendimento.tipo === 0 ? \"NR\" : \"PR\"}{atendimento.posicao}\n                    <Header.Subheader style={{ fontSize: '3.5rem', color: \"red\" }}>MESA: {atendimento.mesa} </Header.Subheader>\n                  </Header>\n                </Segment>\n              </Animated>\n            </div>\n\n          </Segment>\n        </div>\n        <div className=\"painel-item painel-shadow\">\n          <div className=\"center\">\n            <Segment inverted padded style={{ fontSize: '6rem' }} textAlign=\"center\">\n              <Header >\n                <Moment interval={1000} format=\"HH:mm:ss\"></Moment>\n                <Header.Subheader style={{ fontSize: '3rem', color: \"white\" }}><Moment format=\"DD/MM/YYYY\"></Moment>\n                </Header.Subheader>\n              </Header>\n            </Segment>\n          </div>\n        </div>\n\n        <div className=\"painel-item size-2 painel-shadow\">\n          <Segment inverted>\n            <Label size=\"massive\" color='red' ribbon>\n              Ultimos Chamados\n        </Label>\n            <div className=\"center\">\n              <Statistic.Group textAlign=\"left\" inverted>\n                {atendidos(anteriores)}\n              </Statistic.Group>\n            </div>\n          </Segment>\n        </div>\n      </div >\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"animate.css/animate.min.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}